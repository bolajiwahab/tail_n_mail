#!perl

use 5.006;
use strict;
use warnings;
use Data::Dumper;
use lib 't','.';
use Test::More tests => 60;

use vars qw{ $info $t };

sub run {

	my $conf = shift || '';

	my $options = shift || '';

	my $COM = "perl tail_n_mail --dryrun --no-tailnmailrc --offset=0 $conf $options";
	my $result = '';
	eval {
		$result = qx{$COM 2>&1};
	};
	return $@ ? "OOPS: $@\n" : $result;
}

my $host = qx{hostname};
chomp $host;

$t = q{Running with non-existent config file gives an error};
$info = run('tests/nosuch.config');
like ($info, qr{Could not open}, $t);

$t = q{Program outputs version information correctly};
my $verinfo = run('--version');
like ($verinfo, qr{^tail_n_mail version [0-9]+\.[0-9]+\.[0-9]+}, $t);
$verinfo =~ /([0-9]+\.[0-9]+\.[0-9]+)/ or die;
my $ver = $1;

$t = q{Program outputs help information when given no args};
$info = run();
like ($info, qr{Usage:}, $t);

for my $arg (qw/ -h --h --help -? --? /) {
    $t = qq{Program outputs help information when given arg: $arg};
    $info = run($arg);
    like ($info, qr{Usage:}, $t);
}

my $config1 = 'tests/config/testconfig-tail_n_mail.1';

$t = q{Program will not accept a start_time with an invalid format};
$info = run("$config1 --start_time=never");
like ($info, qr{format YYYY}, $t);
$info = run("$config1 --start_time=123456789");
like ($info, qr{format YYYY}, $t);

$t = q{Program works with a correct start_time of 14 digits};
my $timestamp = '2009-04-01 22:33:44';
$info = run("$config1 --start_time='$timestamp'");
like ($info, qr{Subject:}, $t);

$t = q{A start_time argument is echoed in the summary section};
my $summary = $info =~ /(Date: .+?)\n\n/s ? $1 : '<no summary>';
like ($summary, qr{^Start time: $timestamp}m, $t);

$t = q{Program fails when an invalid mailsig argument is given};
$info = run("$config1 --mailsig=nosuchfile");
like ($info, qr{nosuchfile}, $t);

$t = q{Correct custom mail sig is read in and sent out};
$info = run("$config1 --mailsig=tests/test.mail.sig");
my $tail = substr($info, -200, 200);
like ($tail, qr{Love,\nMe}, $t);

$t = q{Correct custom mail sigs is read in and sent out in correct order};
$info = run("$config1 --mailsig=tests/test.mail.sig --mailsig=tests/test.mail.sig2 --debug");
$tail = substr($info, -200, 200);
like ($tail, qr{Love,\nMe\n\(all of us, really\)}, $t);

$t = q{Using the --debug option dumps the config information};
ok ($info =~ /debug_force_rotated/, $t);

###
$info = run($config1);
###

$t = q{Test config 1 produces correct Subject line};
my $headers = $info =~ /(Subject: .+?)\n\n/s ? $1 : '<no headers>';
like ($headers, qr{^Subject: Acme $host Postgres errors 39 : 60$}m, $t);

$t = q{Test config 1 produces correct bulk email header 1};
like ($headers, qr{^Auto-Submitted: auto-generated$}m, $t);

$t = q{Test config 1 produces correct bulk email header 2};
like ($headers, qr{^Precedence: bulk$}m, $t);

$t = q{Test config 1 produces correct tnm version in header};
like ($headers, qr{^X-TNM-VERSION: $ver$}m, $t);

$t = q{Test config 1 produces expected 'To' value};
my $email = 'someone@example.com';
like ($headers, qr{^To: $email$}m, $t);

$t = q{Test config 1 produces a valid 'Date' line};
$summary = $info =~ /(Date: .+?)\n\n/s ? $1 : '<no summary>';
like ($summary, qr{^Date: \w\w\w \w\w\w [0-9 ][0-9]}m, $t);

$t = q{Test config 1 produces a valid 'Host' line};
like ($summary, qr{^Host: $host}m, $t);

$t = q{Test config 1 produces correct 'Unique items' line};
like ($summary, qr{^Unique items: 39$}m, $t);

$t = q{Test config 1 produces correct 'Matches from' line};
like ($summary, qr{^Matches from tests/logs/testlog1.txt: 60$}m, $t);

$t = q{Test config 1 produces a valid 'DRYRUN' line};
my $dryrun = $info =~ /(DRYRUN: .+)/ ? $1 : '<no dryrun>';
like ($dryrun, qr{DRYRUN: .+$email}, $t);

$t = q{Test config 1 produces correct first item match};
my $between = $info =~ /(.+?between.+)/ ? $1 : '<no between>';
is ($between, '[1] (between lines 9,542 and 9,586, occurs 5 times)', $t);

$t = q{Test config 1 produces correct "First" timestamp};
my $first = $info =~ /(First.+)/ ? $1 : '<no First>';
is ($first, 'First: 2010-12-22 19:17:53 EST [29929]', $t);

$t = q{Test config 1 produces correct "Last" timestamp};
my $last = $info =~ /(Last.+)/ ? $1 : '<no Last>';
is ($last, 'Last:  2010-12-22 19:17:53 EST [29929]', $t);

$t = q{Test config 1 produces correct normalized output for the ERROR};
my $error = $info =~ /(ERROR: .+)/ ? $1 : '<no error>';
is ($error, 'ERROR: invalid input syntax for type point: "?"', $t);

$t = q{Test config 1 produces correct normalized output for the STATEMENT};
my $statement = $info =~ /(STATEMENT: .+)/ ? $1 : '<no statement>';
is ($statement, 'STATEMENT: INSERT INTO dbd_pg_test_geom(xpoint) VALUES (?)', $t);

$t = q{Test config 1 produces correct literal output for the ERROR};
$error = $info =~ /\-\n(ERROR: .+)/ ? $1 : '<no error>';
is ($error, 'ERROR: invalid input syntax for type point: "123,abc"', $t);

$t = q{Test config 1 produces correct literal output for the STATEMENT};
$statement = $info =~ /(STATEMENT: .+)\n\n/ ? $1 : '<no statement>';
is ($statement, 'STATEMENT: INSERT INTO dbd_pg_test_geom(xpoint) VALUES ($1)', $t); ## no critic (ValuesAndExpressions::RequireInterpolationOfMetachars)

$t = q{Test config 1 produces correct output for second match};
my $chunk = $info =~ /(\[2\].+?\n)\n/s ? $1 : '<no second match>';
my $expected = << 'EOT';
[2] (between lines 9,598 and 9,643, occurs 5 times)
First: 2010-12-22 19:17:53 EST [29929]
Last:  2010-12-22 19:17:53 EST [29929]
ERROR: type "line" not yet implemented at character 17
STATEMENT: EXECUTE geotest (?,?)
EOT
is ($chunk, $expected, $t);

$t = q{Test config 1 produces correct output for third match};
$chunk = $info =~ /(\[3\].+?\n)\n/s ? $1 : '<no third match>';
$expected = << 'EOT';
[3] (between lines 9,603 and 9,647, occurs 5 times)
First: 2010-12-22 19:17:53 EST [29929]
Last:  2010-12-22 19:17:53 EST [29929]
ERROR: type "line" not yet implemented
STATEMENT: INSERT INTO dbd_pg_test_geom(xline) VALUES ($1)
EOT
is ($chunk, $expected, $t);

$t = q{Test config 1 produces correct output for fourth match};
$chunk = $info =~ /(\[4\].+?\n)\n/s ? $1 : '<no fourth match>';
$expected = << 'EOT';
[4] (between lines 8,187 and 8,200, occurs 3 times)
First: 2010-12-22 19:17:41 EST [29896]
Last:  2010-12-22 19:17:41 EST [29896]
ERROR: COPY from stdin failed: COPY terminated by new PQexec
CONTEXT: COPY dbd_pg_test4, line 1
STATEMENT: COPY dbd_pg_test4 FROM STDIN
EOT
is ($chunk, $expected, $t);

$t = q{Test config 1 produces correct output for fifth match};
$chunk = $info =~ /(\[5\].+?\n)\n/s ? $1 : '<no fifth match>';
$expected = << 'EOT';
[5] (between lines 1,013 and 1,015, occurs 2 times)
First: 2010-12-22 19:17:38 EST [29867]
Last:  2010-12-22 19:17:38 EST [29867]
ERROR: syntax error at or near "Testing" at character 1
STATEMENT: Testing the ShowErrorStatement attribute
EOT
is ($chunk, $expected, $t);

###
$info = run('tests/config/testconfig-tail_n_mail.3');
###

$t = q{Test config 3 produces correct Subject line};
$headers = $info =~ /(Subject: .+?)\n\n/s ? $1 : '<no headers>';
like ($headers, qr{^Subject: Acme $host Postgres errors 3 : 5$}m, $t);

$t = q{Test config 3 produces correct first item match};
$between = $info =~ /(.+?between.+)/ ? $1 : '<no between>';
is ($between, '[1] (between lines 236 and 238, occurs 2 times)', $t);

$t = q{Test config 3 produces correct "First" timestamp};
$first = $info =~ /(First.+)/ ? $1 : '<no First>';
is ($first, 'First: 2012-08-29 11:21:22.327 EDT [32343] greg@space-tower.com', $t);

$t = q{Test config 3 produces correct "Last" timestamp};
$last = $info =~ /(Last.+)/ ? $1 : '<no Last>';
is ($last, 'Last:  2012-08-29 11:21:22.328 EDT [32343] greg@space-tower.com', $t);

$t = q{Test config 3 produces correct literal output for the ERROR};
$error = $info =~ /(ERROR: .+)/ ? $1 : '<no error>';
is ($error, 'ERROR: syntax error at or near "Testing" at character 1', $t);

$t = q{Test config 3 produces correct literal output for the STATEMENT};
$statement = $info =~ /(STATEMENT: .+)/ ? $1 : '<no statement>';
is ($statement, 'STATEMENT: Testing the ShowErrorStatement attribute', $t);

$t = q{Test config 3 produces correct output for second match};
$chunk = $info =~ /(\[2\].+?\n)\n/s ? $1 : '<no second match>';
$expected = << 'EOT';
[2] (between lines 327 and 334, occurs 2 times)
First: 2012-08-29 11:21:22.556 EDT [32348] greg@space-tower.com
Last:  2012-08-29 11:21:22.558 EDT [32348] greg@space-tower.com
ERROR: cannot execute INSERT in a read-only transaction
STATEMENT: INSERT INTO dbd_pg_test (id) VALUES (50)
EOT
is ($chunk, $expected, $t);

###
$info = run('tests/config/testconfig-tail_n_mail.4');
###

$t = q{Test config 4 produces correct Subject line};
$headers = $info =~ /(Subject: .+?)\n\n/s ? $1 : '<no headers>';
like ($headers, qr{^Subject: Acme $host Postgres errors 2 : 2$}m, $t);

## This is slightly broken due to the app name issue
$t = q{Test config 4 produces correct output for first match};
$chunk = $info =~ /(\[1\].+?\n)\n/s ? $1 : '<no first match>';
$expected = << 'EOT';
[1] (from line 13)
2014-04-17 10:11:42.261 EDT [31988]:  [13-1] greg greg@[local] bobapp
ERROR: syntax error at or near "being" at character 1
STATEMENT: being;
EOT
is ($chunk, $expected, $t);

###
$info = run('tests/config/testconfig-tail_n_mail.7');
###

$t = q{Test config 7 produces correct output for first match};
$chunk = $info =~ /(\[1\].+?\n)\n/s ? $1 : '<no first match>';
$expected = << 'EOT';
[1] (from line 138)
[local] [13295] 5ccc4c4d.33ef 2019-05-03 10:12:29.584 EDT [unknown] greg@postgres line:67
ERROR: RAISE EXCEPTION FROM dbdpg_test_error_handler
CONTEXT: PL/pgSQL function dbdpg_test_error_handler(text) line 10 at RAISE
STATEMENT: SELECT * FROM dbdpg_test_error_handler( $1 )
EOT
is ($chunk, $expected, $t);

###
$info = run('tests/config/testconfig-tail_n_mail.8');
###

$t = q{Test config 8 gives a warning for a non-existent log file};
$summary = $info =~ /(Date: .+?)\n\n/s ? $1 : '<no summary>';
like ($summary, qr{!! File was not found: tests/logs/testlog2.txt}, $t);

$t = q{Argument 'yesfile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --yesfile testlog4');
## No matches due to invalid LOG_LINE_PREFIX!
is (length $info, 0, $t);

$t = q{Argument 'yesfile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --yesfile testlog1');
$expected = q{!! File was not found: tests/logs/testlog2.txt};
unlike ($info, qr{\Q$expected}s, $t);

$t = q{Argument 'nofile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --nofile "testlog[12]" ');
is (length $info, 0, $t);

$t = q{Argument 'nofile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --nofile testlog2 ');
$expected = q{!! File was not found: tests/logs/testlog2.txt};
unlike ($info, qr{\Q$expected}s, $t);

$t = q{Argument 'nofile' limits which FILE lines are used - multiple args};
$info = run('tests/config/testconfig-tail_n_mail.8 --nofile testlog1 --nofile testlog2');
is (length $info, 0, $t);

$t = q{Duplicate FILE entries in the same config file throw an exception};
$info = run('tests/config/testconfig-tail_n_mail.duplicate.files');
like ($info, qr/entries are duplicated/, $t);

$t = q{Duplicate FILE entries in inherited files throw an exception};
$info = run('tests/config/testconfig-tail_n_mail.duplicate.files2');
like ($info, qr/entries are duplicated/, $t);

###
$info = run('tests/config/testconfig-tail_n_mail.8 --show_file_counter=0');
###

$t = q{Argument 'show_file_counter=0' turns off the automatic counting};
$chunk = $info =~ /(Matches.+?between lines.+?\n)/s ? $1 : '<no chunk>';
like ($chunk, qr/\n\Q(between lines 9,542 and 9,586, occurs 5 times)\E/, $t);

my $configxv = 'tests/config/testconfig-tail_n_mail.xv';

###
$info = run($configxv);
###

$t = q{Using %x and %v in the log_line_prefix works as expected (count)};
$chunk = $info =~ /(Matches from.+?\n)/s ? $1 : '<no chunk>';
like ($chunk, qr/ 3$/, $t);

$t = q{Using %x and %v in the log_line_prefix works as expected (detail)};
$expected = 'ERROR: relation "dbd_pg_nonexistentsequence_test" does not exist';
like ($info, qr/^$expected/m, $t);

$t = q{Using %x and %v in the log_line_prefix works as expected (correct prefix 1)};
$expected = '2021-02-19 13:00:38.414 EST [30447] 0';
like ($info, qr/^\Q$expected\E$/m, $t);

$t = q{Using %x and %v in the log_line_prefix works as expected (correct prefix 2)};
$expected = '2021-02-19 13:00:39.519 EST [30456] 0 3/34';
like ($info, qr/^\Q$expected\E$/m, $t);

exit;
